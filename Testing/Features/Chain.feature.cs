// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Testing.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Chain")]
    public partial class ChainFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Chain.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Chain", "The Chain has the idea to approve some \r\ninvoice depending of the rule", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding Rules to  Chain")]
        [NUnit.Framework.CategoryAttribute("chain")]
        public virtual void AddingRulesToChain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding Rules to  Chain", new string[] {
                        "chain"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("Group of rules", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("I Add", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.Then("Group of the rules are saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Approving Rules")]
        public virtual void ApprovingRules()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Approving Rules", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Step",
                        "Role",
                        "Apply"});
            table1.AddRow(new string[] {
                        "Rule 1",
                        "Less 200",
                        "Automatic Approver",
                        "(c) => c.Amount < 200"});
            table1.AddRow(new string[] {
                        "Rule 2",
                        "More 200 And Less 400",
                        "Automatic Approve",
                        "(c) => c.Amount > 400 && c.Amount < 600"});
            table1.AddRow(new string[] {
                        "Rule 3",
                        "More 600 And Less 800",
                        "Automatic Approve",
                        "(c) => c.Amount > 600 && c.Amount < 8000"});
            table1.AddRow(new string[] {
                        "Rule 4",
                        "More 800 And Less 1000",
                        "Automatic Approve",
                        "(c) => c.Amount > 800 && c.Amount < 1000"});
            table1.AddRow(new string[] {
                        "Rule 5",
                        "More 200 And Less 400",
                        "John Smith",
                        "(c) => c.Amount > 1000"});
#line 12
 testRunner.Given("a list of rules", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Date",
                        "Amount"});
            table2.AddRow(new string[] {
                        "Invoice 1",
                        "12/12/2012",
                        "123.56"});
            table2.AddRow(new string[] {
                        "Invoice 2",
                        "12/12/2013",
                        "1020.56"});
            table2.AddRow(new string[] {
                        "Invoice 3",
                        "12/12/2014",
                        "600.56"});
            table2.AddRow(new string[] {
                        "Invoice 4",
                        "12/12/20115",
                        "789.56"});
#line 19
 testRunner.And("a group of invoices", ((string)(null)), table2, "And ");
#line 26
 testRunner.When("I Execute \'Invoice 1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 27
 testRunner.Then("I Get the \'Rule 1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
 testRunner.When("I Execute \'Invoice 2\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 29
 testRunner.Then("I Get the \'Rule 5\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 30
 testRunner.When("I Execute \'Invoice 3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
 testRunner.Then("I Get the \'Rule 3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 32
 testRunner.When("I Execute \'Invoice 4\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.Then("I Get the \'Rule 3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "Name",
                        "John Galt"});
            table3.AddRow(new string[] {
                        "Date",
                        "12/12/2015"});
            table3.AddRow(new string[] {
                        "Amount",
                        "685.45"});
#line 35
 testRunner.When("I Execute Invoice", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "Name",
                        "Rule 3"});
            table4.AddRow(new string[] {
                        "Step",
                        "More 600 And Less 800"});
            table4.AddRow(new string[] {
                        "Role",
                        "Automatic Approve"});
#line 40
 testRunner.Then("I Get the Rule", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
